{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TLPM.jl Documentation for TLPM.jl - [Average](api_configuration.md#Average) - [Power Measurement](api_configuration.md#Power-Measurement) - [Correction](api_correction.md#Correction) - [Power Measurement](api_power_measurement.md#Power-Measurement) - [TLPM Programming Manual](developer_information.md#TLPM-Programming-Manual) - [Connect and Measure Power with Average Time](example.md#Connect-and-Measure-Power-with-Average-Time) TLPM.jl Prerequisites Installation","title":"Home"},{"location":"#tlpmjl","text":"Documentation for TLPM.jl - [Average](api_configuration.md#Average) - [Power Measurement](api_configuration.md#Power-Measurement) - [Correction](api_correction.md#Correction) - [Power Measurement](api_power_measurement.md#Power-Measurement) - [TLPM Programming Manual](developer_information.md#TLPM-Programming-Manual) - [Connect and Measure Power with Average Time](example.md#Connect-and-Measure-Power-with-Average-Time) TLPM.jl Prerequisites Installation","title":"TLPM.jl"},{"location":"api_configuration/","text":"Average These functions handle the measurement averaging of the instrument. # TLPM.get_avg_time \u2014 Function . get_avg_time(x::TLPMDevice) -> Float64 Return the average time for measurement value generation. source # TLPM.get_minimum_avg_time \u2014 Function . get_minimum_avg_time(x::TLPMDevice) -> Float64 Return the minimum average time for measurement value generation that can be set. source # TLPM.get_maximum_avg_time \u2014 Function . get_maximum_avg_time(x::TLPMDevice) -> Float64 Return the maximum average time for measurement value generation that can be set. source # TLPM.get_default_avg_time \u2014 Function . get_default_avg_time(x::TLPMDevice) -> Float64 Return the default average time for measurement value generation that can be set. source # TLPM.set_avg_time \u2014 Function . Sets the average time for measurement value generation. source Power Measurement These functions handle the power measurement of the instrument. # TLPM.get_power_auto_range \u2014 Function . get_power_auto_range(x::TLPMDevice) -> Bool Returns the power auto range mode. false means autorange is off, true means auto range is on. source # TLPM.set_power_auto_range \u2014 Function . set_power_auto_range(x::TLPMDevice, autorange::Bool) -> Nothing Sets the power auto range mode. false means auto range is off, true means auto range is on. source # TLPM.get_power_range \u2014 Function . get_power_range(x::TLPMDevice) -> Float64 Returns the power range value in watt [W]. source # TLPM.get_minimum_power_range \u2014 Function . get_minimum_power_range(x::TLPMDevice) -> Float64 Returns the minimum power range value in watt [W]. source # TLPM.get_maximum_power_range \u2014 Function . get_maximum_power_range(x::TLPMDevice) -> Float64 Returns the maximum power range value in watt [W]. source # TLPM.set_power_range \u2014 Function . set_power_range(x::TLPMDevice, power_to_measure::Float64) -> Nothing Sets the sensor's power range. power_to_measure specifies the most positive signal level expected for the sensor input in watt [W]. source # TLPM.get_power_ref \u2014 Function . get_power_ref(x::TLPMDevice) -> Float64 Get the power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_minimum_power_ref \u2014 Function . get_minimum_power_ref(x::TLPMDevice) -> Float64 Get the minimum power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_maximum_power_ref \u2014 Function . get_maximum_power_ref(x::TLPMDevice) -> Float64 Get the maximum power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_default_power_ref \u2014 Function . get_default_power_ref(x::TLPMDevice) -> Float64 Get the default power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.set_power_ref \u2014 Function . set_power_ref(x::TLPMDevice, power_reference_value::Float64) -> Nothing Set the power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_power_unit \u2014 Function . get_power_unit(x::TLPMDevice) -> PowerUnit This function returns the unit of the power value. Can be either the type TLPM.Watt or TLPM.dBm . source # TLPM.set_power_unit \u2014 Function . set_power_unit(x::TLPMDevice, power_unit::PowerUnit) -> Nothing Set the unit of the power value. power_unit can be either TLPM.Watt or TLPM.dBm . source","title":"Api configuration"},{"location":"api_configuration/#average","text":"These functions handle the measurement averaging of the instrument. # TLPM.get_avg_time \u2014 Function . get_avg_time(x::TLPMDevice) -> Float64 Return the average time for measurement value generation. source # TLPM.get_minimum_avg_time \u2014 Function . get_minimum_avg_time(x::TLPMDevice) -> Float64 Return the minimum average time for measurement value generation that can be set. source # TLPM.get_maximum_avg_time \u2014 Function . get_maximum_avg_time(x::TLPMDevice) -> Float64 Return the maximum average time for measurement value generation that can be set. source # TLPM.get_default_avg_time \u2014 Function . get_default_avg_time(x::TLPMDevice) -> Float64 Return the default average time for measurement value generation that can be set. source # TLPM.set_avg_time \u2014 Function . Sets the average time for measurement value generation. source","title":"Average"},{"location":"api_configuration/#power-measurement","text":"These functions handle the power measurement of the instrument. # TLPM.get_power_auto_range \u2014 Function . get_power_auto_range(x::TLPMDevice) -> Bool Returns the power auto range mode. false means autorange is off, true means auto range is on. source # TLPM.set_power_auto_range \u2014 Function . set_power_auto_range(x::TLPMDevice, autorange::Bool) -> Nothing Sets the power auto range mode. false means auto range is off, true means auto range is on. source # TLPM.get_power_range \u2014 Function . get_power_range(x::TLPMDevice) -> Float64 Returns the power range value in watt [W]. source # TLPM.get_minimum_power_range \u2014 Function . get_minimum_power_range(x::TLPMDevice) -> Float64 Returns the minimum power range value in watt [W]. source # TLPM.get_maximum_power_range \u2014 Function . get_maximum_power_range(x::TLPMDevice) -> Float64 Returns the maximum power range value in watt [W]. source # TLPM.set_power_range \u2014 Function . set_power_range(x::TLPMDevice, power_to_measure::Float64) -> Nothing Sets the sensor's power range. power_to_measure specifies the most positive signal level expected for the sensor input in watt [W]. source # TLPM.get_power_ref \u2014 Function . get_power_ref(x::TLPMDevice) -> Float64 Get the power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_minimum_power_ref \u2014 Function . get_minimum_power_ref(x::TLPMDevice) -> Float64 Get the minimum power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_maximum_power_ref \u2014 Function . get_maximum_power_ref(x::TLPMDevice) -> Float64 Get the maximum power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_default_power_ref \u2014 Function . get_default_power_ref(x::TLPMDevice) -> Float64 Get the default power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.set_power_ref \u2014 Function . set_power_ref(x::TLPMDevice, power_reference_value::Float64) -> Nothing Set the power reference value. Remark: The power reference value has the unit specified with set_power_unit . This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON. source # TLPM.get_power_unit \u2014 Function . get_power_unit(x::TLPMDevice) -> PowerUnit This function returns the unit of the power value. Can be either the type TLPM.Watt or TLPM.dBm . source # TLPM.set_power_unit \u2014 Function . set_power_unit(x::TLPMDevice, power_unit::PowerUnit) -> Nothing Set the unit of the power value. power_unit can be either TLPM.Watt or TLPM.dBm . source","title":"Power Measurement"},{"location":"api_connection/","text":"# TLPM.connect! \u2014 Function . connect!(x::TLPMDevice; query=true, reset=true) -> TLPMDevice Make a connection to the TLPMDevice x . Keyword Arguments query=true : This parameter specifies whether an identification query is performed during the initialization process. reset=true : This parameter specifies whether the instrument is reset during the initialization process. source # TLPM.disconnect \u2014 Function . disconnect(x::TLPMDevice) -> Nothing Disconnect the TLPMDevice . source # Base.open \u2014 Function . open(f::Function, x::TLPMDevice; query=true, reset=true) -> Nothing Opens a connection to the TLPM device, executes function f and finally disconnects from the device. Keyword Arguments query=true : This parameter specifies whether an identification query is performed during the initialization process. reset=true : This parameter specifies whether the instrument is reset during the initialization process. Example julia> find_resources() julia> resource_name = get_resource_name(0x00) \"USB0::0x1313::0x8072::1918020::INSTR\" julia> dev = TLPMDevice(resource_name) TLPMDevice(0x00000000, \"USB0::0x1313::0x8072::1918020::INSTR\") julia> open(dev) do x measure_power(x) |> println end 4.54033199e-7 source","title":"Api connection"},{"location":"api_correction/","text":"Correction These functions handle the input corrections of the instrument. # TLPM.start_dark_adjust \u2014 Function . start_dark_adjust(x::TLPMDevice) -> Nothing This function starts the dark current/zero offset adjustment procedure. Remark: You have to darken the input before starting dark/zero adjustment. You can get the state of dark/zero adjustment with get_dark_adjust_state You can stop dark/zero adjustment with cancel_dark_adjust You get the dark/zero value with get_dark_offset Energy sensors do not support this function source # TLPM.cancel_dark_adjust \u2014 Function . cancel_dark_adjust(x::TLPMDevice) -> Nothing This function cancels a running dark current/zero offset adjustment procedure. source # TLPM.get_dark_adjust_state \u2014 Function . get_dark_adjust_state(x::TLPMDevice) -> Int16 This function returns the state of a dark current/zero offset adjustment procedure previously initiated by . Possible return values are: 0 : no dark adjustment running 1 : dark adjustment is running source # TLPM.get_dark_offset \u2014 Function . get_dark_offset(x::TLPMDevice) This function returns the dark/zero offset. The unit of the returned offset value depends on the sensor type. Photodiodes return the dark offset in ampere [A]. Thermal sensors return the dark offset in volt [V]. The function is not supported with energy sensors. source # TLPM.get_wavelength \u2014 Function . get_wavelength(x::TLPMDevice) -> Float64 This function returns the users wavelength in nanometer [nm]. The wavelength set value is used for calculating power. source # TLPM.get_minimum_wavelength \u2014 Function . get_minimum_wavelength(x::TLPMDevice) -> Float64 This function returns the minimum wavelength in nanometer [nm] that can be set by the user. The wavelength set value is used for calculating power. source # TLPM.get_maximum_wavelength \u2014 Function . get_maximum_wavelength(x::TLPMDevice) -> Float64 This function returns the maximum wavelength in nanometer [nm] that can be set by the user. The wavelength set value is used for calculating power. source # TLPM.set_wavelength \u2014 Function . set_wavelength(x::TLPMDevice, wavelength::Float64) -> Nothing This function sets the users wavelength in nanometer [nm]. The wavelength set value is used for calculating power. source","title":"Api correction"},{"location":"api_correction/#correction","text":"These functions handle the input corrections of the instrument. # TLPM.start_dark_adjust \u2014 Function . start_dark_adjust(x::TLPMDevice) -> Nothing This function starts the dark current/zero offset adjustment procedure. Remark: You have to darken the input before starting dark/zero adjustment. You can get the state of dark/zero adjustment with get_dark_adjust_state You can stop dark/zero adjustment with cancel_dark_adjust You get the dark/zero value with get_dark_offset Energy sensors do not support this function source # TLPM.cancel_dark_adjust \u2014 Function . cancel_dark_adjust(x::TLPMDevice) -> Nothing This function cancels a running dark current/zero offset adjustment procedure. source # TLPM.get_dark_adjust_state \u2014 Function . get_dark_adjust_state(x::TLPMDevice) -> Int16 This function returns the state of a dark current/zero offset adjustment procedure previously initiated by . Possible return values are: 0 : no dark adjustment running 1 : dark adjustment is running source # TLPM.get_dark_offset \u2014 Function . get_dark_offset(x::TLPMDevice) This function returns the dark/zero offset. The unit of the returned offset value depends on the sensor type. Photodiodes return the dark offset in ampere [A]. Thermal sensors return the dark offset in volt [V]. The function is not supported with energy sensors. source # TLPM.get_wavelength \u2014 Function . get_wavelength(x::TLPMDevice) -> Float64 This function returns the users wavelength in nanometer [nm]. The wavelength set value is used for calculating power. source # TLPM.get_minimum_wavelength \u2014 Function . get_minimum_wavelength(x::TLPMDevice) -> Float64 This function returns the minimum wavelength in nanometer [nm] that can be set by the user. The wavelength set value is used for calculating power. source # TLPM.get_maximum_wavelength \u2014 Function . get_maximum_wavelength(x::TLPMDevice) -> Float64 This function returns the maximum wavelength in nanometer [nm] that can be set by the user. The wavelength set value is used for calculating power. source # TLPM.set_wavelength \u2014 Function . set_wavelength(x::TLPMDevice, wavelength::Float64) -> Nothing This function sets the users wavelength in nanometer [nm]. The wavelength set value is used for calculating power. source","title":"Correction"},{"location":"api_index/","text":"This is an alphabetical list of exported functions. TLPM.TLPMDevice Base.open TLPM.cancel_dark_adjust TLPM.connect! TLPM.disconnect TLPM.find_resources TLPM.get_avg_time TLPM.get_calibration_message TLPM.get_dark_adjust_state TLPM.get_dark_offset TLPM.get_default_avg_time TLPM.get_default_power_ref TLPM.get_maximum_avg_time TLPM.get_maximum_power_range TLPM.get_maximum_power_ref TLPM.get_maximum_wavelength TLPM.get_minimum_avg_time TLPM.get_minimum_power_range TLPM.get_minimum_power_ref TLPM.get_minimum_wavelength TLPM.get_power_auto_range TLPM.get_power_calibration_points TLPM.get_power_calibration_points_information TLPM.get_power_range TLPM.get_power_ref TLPM.get_power_unit TLPM.get_resource_info TLPM.get_resource_name TLPM.get_sensor_info TLPM.get_timeout_value TLPM.get_wavelength TLPM.measure_power TLPM.reinit_sensor TLPM.set_avg_time TLPM.set_power_auto_range TLPM.set_power_range TLPM.set_power_ref TLPM.set_power_unit TLPM.set_timeout_value TLPM.set_wavelength TLPM.start_dark_adjust","title":"Api index"},{"location":"api_power_measurement/","text":"Power Measurement # TLPM.measure_power \u2014 Function . measure_power(x::TLPMDevice) -> Float64 Obtain a power reading from the instrument. This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Time this may take up to seconds. Refer to set_avg_time and get_avg_time . source","title":"Api power measurement"},{"location":"api_power_measurement/#power-measurement","text":"# TLPM.measure_power \u2014 Function . measure_power(x::TLPMDevice) -> Float64 Obtain a power reading from the instrument. This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Time this may take up to seconds. Refer to set_avg_time and get_avg_time . source","title":"Power Measurement"},{"location":"api_resources/","text":"# TLPM.find_resources \u2014 Function . find_resources() -> UInt32 This function finds all driver compatible devices attached to the PC and returns the number of found devices. The function additionally stores information like system name about the found resources internally. This information can be retrieved with further functions from the class, e.g. get_resource_name and get_resource_info . source # TLPM.get_resource_name \u2014 Function . get_resource_name(device_index::T) where T <: Unsigned -> String Get the resource name of device with index device_index which is needed to open a device with TLPMDevice . You have to first call find_resources() otherwise you get a ReadOnlyMemoryError . Example julia> find_resources() 0x00000001 julia> get_resource_name(0x00) \"USB0::0x1313::0x8072::1918020::INSTR\" source # TLPM.get_resource_info \u2014 Function . get_resource_info(device_index::T) where T <: Unsigned This function gets information about a connected resource. Notes: The data provided by this function was updated at the last call of find_resources . source # TLPM.TLPMDevice \u2014 Type . TLPMDevice(resource_name::String) -> TLPMDevice Create a new TLPMDevice containing the instrument handle and the resource name. Arguments resource_name::String : the resource name of the device returned by get_resource_name Returns TLPMDevice : a struct representing the device source","title":"Api resources"},{"location":"api_user_power_calibration/","text":"These functions handle user power calibration of the instrument. # TLPM.reinit_sensor \u2014 Function . reinit_sensor(x::TLPMDevice) -> Nothing To use the user power calibration, the sensor has to be reconnected. Either manually remove and reconnect the sensor to the instrument or use this function. This function will wait 2 seconds until the sensor has been reinitialized. The following power meters support this function: PM400, PM101x, PM102x, PM103x. source # TLPM.get_power_calibration_points \u2014 Function . get_power_calibration_points(x::TLPMDevice, index::UInt16) -> PowerCalibrationPoints Returns a list of wavelength and the corresponding power correction factor. The following power meters support this function: PM400, PM101x, PM102x, PM103x. Arguments index : Index of the power calibration (range 1...5) source # TLPM.get_power_calibration_points_information \u2014 Function . get_power_calibration_points_information(x::TLPMDevice, index::UInt16) -> PowerCalibrationInformation Queries the customer adjustment header like serial nr, cal date, nr of points at given index. The following power meters support this function: PM400, PM101x, PM102x, PM103x. Arguments index : Index of the power calibration (range 1...5) source","title":"Api user power calibration"},{"location":"api_utility_functions/","text":"# TLPM.get_calibration_message \u2014 Function . get_calibration_message(x::TLPMDevice) -> String Returns a human readable calibration message. source # TLPM.get_sensor_info \u2014 Function . get_sensor_info(x::TLPMDevice) -> SensorInfo This function is used to obtain informations from the connected sensor like sensor name, serial number, calibration message, sensor type, sensor subtype and sensor flags. source # TLPM.get_timeout_value \u2014 Function . get_timeout_value(x::TLPMDevice) -> UInt32 Returns the communication timeout value in ms. source # TLPM.set_timeout_value \u2014 Function . set_timeout_value(x::TLPMDevice, timeout_value::UInt32) -> Nothing Set the communication timeout value in ms. source","title":"Api utility functions"},{"location":"developer_information/","text":"TLPM Programming Manual The TLPM programming manual comes with the Thorlabs Optical Power Monitor software and is typically located at C:\\Program Files (x86)\\IVI Foundation\\VISA\\WinNT\\TLPM\\Manual .","title":"Developer information"},{"location":"developer_information/#tlpm-programming-manual","text":"The TLPM programming manual comes with the Thorlabs Optical Power Monitor software and is typically located at C:\\Program Files (x86)\\IVI Foundation\\VISA\\WinNT\\TLPM\\Manual .","title":"TLPM Programming Manual"},{"location":"example/","text":"Connect and Measure Power with Average Time This example shows how to connect to a power meter, set the desired average time, a timeout compatible with that average time, retrieve the power measurement, and disconnect from the device. julia> using TLPM julia> find_resources() 0x00000001 julia> resource_index = 0x00 0x00 julia> get_resource_info(resource_index) TLPM.ResourceInfo(\"PM100USB\", \"1918020\", \"Thorlabs\", true) julia> resource_name = get_resource_name(resource_index) \"USB0::0x1313::0x8072::1918020::INSTR\" julia> dev = TLPMDevice(resource_name) TLPMDevice(0x00000000, \"USB0::0x1313::0x8072::1918020::INSTR\") julia> connect!(dev) TLPMDevice(0x000070b3, \"USB0::0x1313::0x8072::1918020::INSTR\") julia> set_timeout_value(dev, UInt32(5000)) # set timeout to 5000 ms julia> set_avg_time(dev, 4.0) # configure average time for measurement to 4 s julia> @time measure_power(dev) 4.002439 seconds (1 allocation: 16 bytes) 1.47045821e-5 julia> disconnect(dev)","title":"Example"},{"location":"example/#connect-and-measure-power-with-average-time","text":"This example shows how to connect to a power meter, set the desired average time, a timeout compatible with that average time, retrieve the power measurement, and disconnect from the device. julia> using TLPM julia> find_resources() 0x00000001 julia> resource_index = 0x00 0x00 julia> get_resource_info(resource_index) TLPM.ResourceInfo(\"PM100USB\", \"1918020\", \"Thorlabs\", true) julia> resource_name = get_resource_name(resource_index) \"USB0::0x1313::0x8072::1918020::INSTR\" julia> dev = TLPMDevice(resource_name) TLPMDevice(0x00000000, \"USB0::0x1313::0x8072::1918020::INSTR\") julia> connect!(dev) TLPMDevice(0x000070b3, \"USB0::0x1313::0x8072::1918020::INSTR\") julia> set_timeout_value(dev, UInt32(5000)) # set timeout to 5000 ms julia> set_avg_time(dev, 4.0) # configure average time for measurement to 4 s julia> @time measure_power(dev) 4.002439 seconds (1 allocation: 16 bytes) 1.47045821e-5 julia> disconnect(dev)","title":"Connect and Measure Power with Average Time"},{"location":"installation/","text":"Prerequisites You have to install the Optical Power Monitor software from Thorlabs . Installation The package is currently not registered. You can install the package with julia> using Pkg julia> Pkg.add(\"https://github.com/MLackner/TLPM.jl\")","title":"Installation"},{"location":"installation/#prerequisites","text":"You have to install the Optical Power Monitor software from Thorlabs .","title":"Prerequisites"},{"location":"installation/#installation","text":"The package is currently not registered. You can install the package with julia> using Pkg julia> Pkg.add(\"https://github.com/MLackner/TLPM.jl\")","title":"Installation"}]}